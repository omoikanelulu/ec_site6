【laravel6のインストール】
composer create-project "laravel/laravel=6.*" プロジェクト名 --prefer-dist

【認証機能追加】
composer require laravel/ui="1.*" --dev
php artisan ui vue --auth

【これすると上記で作成されたファイルを置き換えるようなので、これだけでいいのかも？】
php artisan ui bootstrap
php artisan ui bootstrap　--auth

【脆弱性を全修正する】（使わなかった）
npm audit fix --force

「Error: error:0308010C:digital envelope routines::unsupported」というエラーが発生。
ググって出てきたstack overflowに記載のあった「set NODE_OPTIONS=--openssl-legacy-provider」する事対処。

DBにsqliteを使用する為、.envとconfig/database.phpを修正。
DB_CONNECTIONの項目をsqliteに変更する。

ここらでサーバを立ち上げて動作確認、welcomeページが表示されてて、認証機能のリンクが表示されてればOKかな。

【ModelとMigrationファイルを作成】
php artisan make:model モデル名 -m
-mのオプションを付けるとMigrationファイルも合わせて作成される。

【Seederファイルの作成】
php artisan make:seed シーダーファイル名

    "基本的にシーダーファイルにはデータベースに情報を挿入するための
    ■Eloquant
    ■DBファサード
    あたりのどれかが必要となってきます。"

ファサードを使う場合
use Illuminate\Support\Facades\DB; //追記する

Seederを実行する前に、SeederフォルダにあるDatabaseSeeder.phpに
作成したSeederファイルを記述する必要がある。

そしてLaravelフォルダ上で下記を実行する
composer dump-autoload
    "シーダー機能はPHPのオートロード（つまりはcomposerを使う）を利用しますので上記コマンドが必要となります。"

【シーディングを実行】
php artisan db:seed

【ルーティングの設定】（web.php）
コントローラを用いるため、Route::get('アドレス', 'コントローラ@アクション名');という要領で、
Route::get('/', 'ShopController@index');等とする。

【コントローラの作成】
php artisan make:controller コントローラ名

【一連の流れ】
この流れの作成順は、自分なりに分かりやすい順番で作った方がいいかも知れん。

    http://localhost/にアクセス
    ↓
    web.phpでルーティング（指定したアドレスにアクセスした時に、どんなアクションをさせるか設定）
    ↓
    ShopControllerのindexメソッドを発動（コントローラにページを表示させる記述）
    ↓
    上記の通りreturnでshop.blade.phpを返す処理（bladeの表示）

と言う一連の流れが出来上がりました。

【Modelの作成】
Modelの作成のコマンドに「--m」でMigrationファイルをまとめて作成できるから、
Modelの作成はもっと早くても良いような。

php artisan make:model Models/Stock

これで、Modelsフォルダ内にStockモデルが作成される。
このStock.phpはどこにも実際のデータベースのStocksテーブルと結び付ける記述がどこにもありません。

けどLaravelの命名規則で、Modelのクラス名を単数形で指定して、
テーブル名を複数形にするというのがあるので、それを満たしておけば勝手にLaravelが判断して結びつけてくれます。
今回だと「Stock」モデルと「Stocks」テーブル。
他にも「Person」モデルと「Peaple」テーブル。

protected $table = 'test_table';
などを追記すればそのモデル名とは関係ないテーブルと紐付けも可能です。

protected $guarded = ['id'];（idカラムを保護する）
protected $fillable = ['id'];（idカラムを編集可能にする）

ログインしている人だけに表示させたい！
middlewareのauthを使用するだけで実現出来る

    ->middleware('auth')（ルート情報にミドルウェアを使用する記述を行う）

Route::get('/mycart', 'ShopController@myCart')->middleware('auth');